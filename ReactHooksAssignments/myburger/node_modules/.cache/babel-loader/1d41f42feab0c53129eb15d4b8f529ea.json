{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\ReactProjects\\\\myburger\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../Shared/utility';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport './Auth.css';\n\nvar auth = function auth(props) {\n  var _useState = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Mail Address'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      authForm = _useState2[0],\n      setAuthForm = _useState2[1];\n\n  var _seState = seState(true),\n      _seState2 = _slicedToArray(_seState, 2),\n      isSignup = _seState2[0],\n      setIsSignUp = _seState2[1];\n\n  useEffect(function () {\n    if (!props.buildingBurger && props.authRedirectPath !== '/') {\n      props.onSetAuthRedirectPath();\n    }\n  }, []);\n\n  var inputChangedHandler = function inputChangedHandler(event, controlName) {\n    var updateControls = updateObject(authForm, _defineProperty({}, controlName, updateObject(authForm[controlName], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, authForm[controlName].validation),\n      touched: true\n    })));\n    setAuthForm(updateControls);\n  };\n\n  var submitHandler = function submitHandler(event) {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\n  };\n\n  var swithAuthModeHandler = function swithAuthModeHandler() {\n    setIsSignUp(!isSignup);\n  };\n\n  var formElementArray = [];\n\n  for (var key in authForm) {\n    formElementArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  var form = formElementArray.map(function (formElement) {\n    return /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: function changed(event) {\n        return _this.inputChangedHandler(event, formElement.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    });\n  });\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }\n    });\n  }\n\n  var errorMessge = null;\n\n  if (props.error) {\n    errorMessge = /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 18\n      }\n    }, props.error.message);\n  }\n\n  var authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: props.authRedirectPath,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 26\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Auth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, authRedirect, errorMessge, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: _this.submitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n    clicked: _this.swithAuthModeHandler,\n    btnType: \"Danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"Switch To \", isSignup ? 'SIGNIN' : 'SIGNUP'));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(email, password, isSignup) {\n      return dispatch(actions.auth(email, password, isSignup));\n    },\n    onSetAuthRedirectPath: function onSetAuthRedirectPath() {\n      return dispatch(actions.setAuthRedirectPath('/'));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["E:/ReactProjects/myburger/src/containers/Auth/Auth.js"],"names":["React","useState","useEffect","connect","Redirect","Input","Button","actions","updateObject","checkValidity","Spinner","auth","props","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","authForm","setAuthForm","seState","isSignup","setIsSignUp","buildingBurger","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updateControls","target","submitHandler","preventDefault","onAuth","swithAuthModeHandler","formElementArray","key","push","id","config","form","map","formElement","loading","errorMessge","error","message","authRedirect","isAuthenticated","mapStateToProps","state","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath","Auth"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA2C,sBAA3C;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAO,YAAP;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAG;AAAA,kBACYX,QAAQ,CAAC;AAClCY,IAAAA,KAAK,EAAC;AACFC,MAAAA,WAAW,EAAC,OADV;AAEFC,MAAAA,aAAa,EAAC;AACVC,QAAAA,IAAI,EAAC,OADK;AAEVC,QAAAA,WAAW,EAAE;AAFH,OAFZ;AAMFC,MAAAA,KAAK,EAAC,EANJ;AAOFC,MAAAA,UAAU,EAAC;AACPC,QAAAA,QAAQ,EAAC,IADF;AAEPC,QAAAA,OAAO,EAAC;AAFD,OAPT;AAWFC,MAAAA,KAAK,EAAC,KAXJ;AAYFC,MAAAA,OAAO,EAAC;AAZN,KAD4B;AAelCC,IAAAA,QAAQ,EAAC;AACLV,MAAAA,WAAW,EAAC,OADP;AAELC,MAAAA,aAAa,EAAC;AACVC,QAAAA,IAAI,EAAC,UADK;AAEVC,QAAAA,WAAW,EAAE;AAFH,OAFT;AAMLC,MAAAA,KAAK,EAAC,EAND;AAOLC,MAAAA,UAAU,EAAC;AACPC,QAAAA,QAAQ,EAAC,IADF;AAERK,QAAAA,SAAS,EAAC;AAFF,OAPN;AAWLH,MAAAA,KAAK,EAAC,KAXD;AAYLC,MAAAA,OAAO,EAAC;AAZH;AAfyB,GAAD,CADpB;AAAA;AAAA,MACZG,QADY;AAAA,MACHC,WADG;;AAAA,iBA+BgBC,OAAO,CAAC,IAAD,CA/BvB;AAAA;AAAA,MA+BRC,QA/BQ;AAAA,MA+BCC,WA/BD;;AAkClB5B,EAAAA,SAAS,CAAC,YAAI;AACb,QAAG,CAACU,KAAK,CAACmB,cAAP,IAAyBnB,KAAK,CAACoB,gBAAN,KAAyB,GAArD,EACA;AACIpB,MAAAA,KAAK,CAACqB,qBAAN;AACH;AACD,GALQ,EAKP,EALO,CAAT;;AAQF,MAAMC,mBAAmB,GAAC,SAApBA,mBAAoB,CAACC,KAAD,EAAOC,WAAP,EAAqB;AAC3C,QAAMC,cAAc,GAAE7B,YAAY,CAACkB,QAAD,sBAC9BU,WAD8B,EAChB5B,YAAY,CAACkB,QAAQ,CAACU,WAAD,CAAT,EAAuB;AAC9ClB,MAAAA,KAAK,EAAEiB,KAAK,CAACG,MAAN,CAAapB,KAD0B;AAE9CI,MAAAA,KAAK,EAACb,aAAa,CAAC0B,KAAK,CAACG,MAAN,CAAapB,KAAd,EAAoBQ,QAAQ,CAACU,WAAD,CAAR,CAAsBjB,UAA1C,CAF2B;AAG9CI,MAAAA,OAAO,EAAC;AAHsC,KAAvB,CADI,EAAlC;AAOAI,IAAAA,WAAW,CAACU,cAAD,CAAX;AACH,GATD;;AAWD,MAAME,aAAa,GAAC,SAAdA,aAAc,CAACJ,KAAD,EAAS;AACxBA,IAAAA,KAAK,CAACK,cAAN;AACC5B,IAAAA,KAAK,CAAC6B,MAAN,CAAaf,QAAQ,CAACb,KAAT,CAAeK,KAA5B,EAAkCQ,QAAQ,CAACF,QAAT,CAAkBN,KAApD,EAA0DW,QAA1D;AACJ,GAHF;;AAIA,MAAMa,oBAAoB,GAAC,SAArBA,oBAAqB,GAAI;AAC5BZ,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACF,GAFD;;AAKQ,MAAMc,gBAAgB,GAAC,EAAvB;;AACC,OAAK,IAAIC,GAAT,IAAgBlB,QAAhB,EAAyB;AACtBiB,IAAAA,gBAAgB,CAACE,IAAjB,CAAsB;AAClBC,MAAAA,EAAE,EAACF,GADe;AAElBG,MAAAA,MAAM,EAACrB,QAAQ,CAACkB,GAAD;AAFG,KAAtB;AAIF;;AACD,MAAII,IAAI,GAAGL,gBAAgB,CAACM,GAAjB,CAAqB,UAAAC,WAAW;AAAA,wBACtC,oBAAC,KAAD;AACD,MAAA,GAAG,EAAEA,WAAW,CAACJ,EADhB;AAED,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBjC,WAF/B;AAGD,MAAA,aAAa,EAAEoC,WAAW,CAACH,MAAZ,CAAmBhC,aAHjC;AAID,MAAA,KAAK,EAAEmC,WAAW,CAACH,MAAZ,CAAmB7B,KAJzB;AAKD,MAAA,OAAO,EAAE,CAACgC,WAAW,CAACH,MAAZ,CAAmBzB,KAL5B;AAMD,MAAA,cAAc,EAAE4B,WAAW,CAACH,MAAZ,CAAmB5B,UANlC;AAOD,MAAA,OAAO,EAAE+B,WAAW,CAACH,MAAZ,CAAmBxB,OAP3B;AAQD,MAAA,OAAO,EAAE,iBAACY,KAAD;AAAA,eAAS,KAAI,CAACD,mBAAL,CAAyBC,KAAzB,EAA+Be,WAAW,CAACJ,EAA3C,CAAT;AAAA,OARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADsC;AAAA,GAAhC,CAAX;;AAaA,MAAGlC,KAAK,CAACuC,OAAT,EAAiB;AACbH,IAAAA,IAAI,gBAAC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL;AACH;;AAED,MAAII,WAAW,GAAC,IAAhB;;AAEA,MAAGxC,KAAK,CAACyC,KAAT,EAAe;AACXD,IAAAA,WAAW,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIxC,KAAK,CAACyC,KAAN,CAAYC,OAAhB,CADJ;AAGH;;AACD,MAAIC,YAAY,GAAC,IAAjB;;AACA,MAAG3C,KAAK,CAAC4C,eAAT,EAAyB;AACtBD,IAAAA,YAAY,gBAAC,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE3C,KAAK,CAACoB,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AACF;;AACF,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKuB,YADL,EAEKH,WAFL,eAGI;AAAM,IAAA,QAAQ,EAAE,KAAI,CAACb,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKS,IADL,eAEI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CAHJ,eAOI,oBAAC,MAAD;AACA,IAAA,OAAO,EAAE,KAAI,CAACN,oBADd;AAEA,IAAA,OAAO,EAAC,QAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE4Bb,QAAQ,GAAE,QAAF,GAAa,QAFjD,CAPJ,CADJ;AAcP,CA/GD;;AAiHA,IAAM4B,eAAe,GAAC,SAAhBA,eAAgB,CAAAC,KAAK,EAAE;AACzB,SAAO;AACHP,IAAAA,OAAO,EAAEO,KAAK,CAAC/C,IAAN,CAAWwC,OADjB;AAEHE,IAAAA,KAAK,EAACK,KAAK,CAAC/C,IAAN,CAAW0C,KAFd;AAGHG,IAAAA,eAAe,EAACE,KAAK,CAAC/C,IAAN,CAAWgD,KAAX,KAAoB,IAHjC;AAIH5B,IAAAA,cAAc,EAAE2B,KAAK,CAACE,aAAN,CAAoBC,QAJjC;AAKH7B,IAAAA,gBAAgB,EAAC0B,KAAK,CAAC/C,IAAN,CAAWqB;AALzB,GAAP;AAOH,CARD;;AASA,IAAM8B,kBAAkB,GAAE,SAApBA,kBAAoB,CAAAC,QAAQ,EAAG;AACjC,SAAM;AACFtB,IAAAA,MAAM,EAAE,gBAAC5B,KAAD,EAAOW,QAAP,EAAiBK,QAAjB;AAAA,aAA8BkC,QAAQ,CAACxD,OAAO,CAACI,IAAR,CAAaE,KAAb,EAAmBW,QAAnB,EAA4BK,QAA5B,CAAD,CAAtC;AAAA,KADN;AAEFI,IAAAA,qBAAqB,EAAC;AAAA,aAAI8B,QAAQ,CAACxD,OAAO,CAACyD,mBAAR,CAA4B,GAA5B,CAAD,CAAZ;AAAA;AAFpB,GAAN;AAIH,CALD;;AAOA,eAAe7D,OAAO,CAACsD,eAAD,EAAiBK,kBAAjB,CAAP,CAA4CG,IAA5C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity} from '../../Shared/utility';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport './Auth.css';\r\n\r\nconst auth = props =>{\r\n  const [authForm,setAuthForm] = useState({\r\n        email:{\r\n            elementType:'input',\r\n            elementConfig:{\r\n                type:'email',\r\n                placeholder: 'Mail Address'\r\n            },\r\n            value:'',\r\n            validation:{\r\n                required:true,\r\n                isEmail:true\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        },\r\n        password:{\r\n            elementType:'input',\r\n            elementConfig:{\r\n                type:'password',\r\n                placeholder: 'Password'\r\n            },\r\n            value:'',\r\n            validation:{\r\n                required:true,\r\n               minLength:6\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        }\r\n       })\r\n      const [isSignup,setIsSignUp] = seState(true);\r\n   \r\n \r\n   useEffect(()=>{\r\n    if(!props.buildingBurger && props.authRedirectPath!=='/')\r\n    {\r\n        props.onSetAuthRedirectPath();\r\n    }\r\n   },[]);\r\n    \r\n   \r\n const inputChangedHandler=(event,controlName)=>{\r\n     const updateControls= updateObject(authForm,{\r\n        [controlName]: updateObject(authForm[controlName],{\r\n            value: event.target.value,\r\n            valid:checkValidity(event.target.value,authForm[controlName].validation),\r\n            touched:true\r\n        })\r\n     });\r\n     setAuthForm(updateControls);\r\n }\r\n\r\nconst submitHandler=(event)=>{\r\n     event.preventDefault();\r\n      props.onAuth(authForm.email.value,authForm.password.value,isSignup);\r\n }\r\nconst swithAuthModeHandler=()=>{\r\n   setIsSignUp(!isSignup);\r\n}\r\n\r\n    \r\n        const formElementArray=[];\r\n         for (let key in authForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:authForm[key]\r\n            });\r\n         }\r\n         let form = formElementArray.map(formElement=>\r\n         (    <Input \r\n             key={formElement.id}\r\n             elementType={formElement.config.elementType}\r\n             elementConfig={formElement.config.elementConfig}\r\n             value={formElement.config.value} \r\n             invalid={!formElement.config.valid}\r\n             shouldValidate={formElement.config.validation}\r\n             touched={formElement.config.touched}\r\n             changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\r\n         )\r\n         );\r\n\r\n         if(props.loading){\r\n             form=<Spinner/>;\r\n         }\r\n\r\n         let errorMessge=null;\r\n\r\n         if(props.error){\r\n             errorMessge=(\r\n                 <p>{props.error.message}</p>\r\n             );\r\n         }\r\n         let authRedirect=null;\r\n         if(props.isAuthenticated){\r\n            authRedirect=<Redirect to={props.authRedirectPath}/>;\r\n         } \r\n        return (\r\n            <div className=\"Auth\">\r\n                {authRedirect}\r\n                {errorMessge}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                clicked={this.swithAuthModeHandler}\r\n                btnType=\"Danger\">Switch To {isSignup? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        loading: state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated:state.auth.token !==null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    };\r\n};\r\nconst mapDispatchToProps= dispatch =>{\r\n    return{\r\n        onAuth: (email,password, isSignup) => dispatch(actions.auth(email,password,isSignup)),\r\n        onSetAuthRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);\r\n"]},"metadata":{},"sourceType":"module"}