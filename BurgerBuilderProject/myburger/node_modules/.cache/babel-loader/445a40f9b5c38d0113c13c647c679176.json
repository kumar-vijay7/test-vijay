{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\ReactProjects\\\\myburger\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/index';\nimport { updateObject } from '../../Shared/utility';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport './Auth.css';\n\nvar Auth = /*#__PURE__*/function (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    _this.inputChangedHandler = function (event, controlName) {\n      var updateControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updateControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      _this.props.onAuth(_this.state.controls.email.value, _this.state.controls.password.value, _this.state.isSignup);\n    };\n\n    _this.swithAuthModeHandler = function () {\n      _this.setState(function (prevState) {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n        this.props.onSetAuthRedirectPath();\n      }\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isNumeric) {\n        var pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isEmail) {\n        var _pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        isValid = _pattern.test(value) && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.controls) {\n        formElementArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementArray.map(function (formElement) {\n        return /*#__PURE__*/React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }\n        });\n      });\n\n      if (this.props.loading) {\n        form = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }\n        });\n      }\n\n      var errorMessge = null;\n\n      if (this.props.error) {\n        errorMessge = /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 18\n          }\n        }, this.props.error.message);\n      }\n\n      var authRedirect = null;\n\n      if (this.props.isAuthenticated) {\n        authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n          to: this.props.authRedirectPath,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 26\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Auth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }\n      }, authRedirect, errorMessge, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }, form, /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n        clicked: this.swithAuthModeHandler,\n        btnType: \"Danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }, \"Switch To \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(email, password, isSignup) {\n      return dispatch(actions.auth(email, password, isSignup));\n    },\n    onSetAuthRedirectPath: function onSetAuthRedirectPath() {\n      return dispatch(actions.setAuthRedirectPath('/'));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["E:/ReactProjects/myburger/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","actions","updateObject","Spinner","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updateControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","swithAuthModeHandler","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","isNumeric","pattern","test","formElementArray","key","push","id","config","form","map","formElement","loading","errorMessge","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject } from '../../Shared/utility';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport './Auth.css';\r\n\r\nclass Auth extends Component {\r\n   state={\r\n       controls:{\r\n        email:{\r\n            elementType:'input',\r\n            elementConfig:{\r\n                type:'email',\r\n                placeholder: 'Mail Address'\r\n            },\r\n            value:'',\r\n            validation:{\r\n                required:true,\r\n                isEmail:true\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        },\r\n        password:{\r\n            elementType:'input',\r\n            elementConfig:{\r\n                type:'password',\r\n                placeholder: 'Password'\r\n            },\r\n            value:'',\r\n            validation:{\r\n                required:true,\r\n               minLength:6\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        }\r\n       },\r\n       isSignup:true\r\n   }\r\n componentDidMount(){\r\n     if(!this.props.buildingBurger && this.props.authRedirectPath!=='/')\r\n        {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n   checkValidity(value,rules){\r\n    let isValid=true;\r\n    if(!rules){\r\n        return true;\r\n    }\r\n    if(rules.required){\r\n        isValid=value.trim()!=='' && isValid;\r\n    }\r\n    if(rules.minLength){\r\n        isValid=value.length>=rules.minLength && isValid\r\n    }\r\n    if(rules.maxLength){\r\n        isValid=value.length<=rules.maxLength && isValid\r\n    }\r\n    if( rules.isNumeric ){\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test( value ) && isValid;\r\n    }\r\n\r\n    if( rules.isEmail ){\r\n        const pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        isValid = pattern.test( value ) && isValid;\r\n    }\r\n    return isValid;\r\n }\r\n\r\n inputChangedHandler=(event,controlName)=>{\r\n     const updateControls={\r\n         ...this.state.controls,\r\n         [controlName]:{\r\n             ...this.state.controls[controlName],\r\n             value: event.target.value,\r\n             valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n             touched:true\r\n         }\r\n     };\r\n     this.setState({controls:updateControls});\r\n }\r\n\r\n submitHandler=(event)=>{\r\n     event.preventDefault();\r\n      this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup);\r\n }\r\nswithAuthModeHandler=()=>{\r\n    this.setState(prevState=>{\r\n        return {isSignup:!prevState.isSignup};\r\n    });\r\n}\r\n\r\n    render() {\r\n        const formElementArray=[];\r\n         for (let key in this.state.controls){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            });\r\n         }\r\n         let form = formElementArray.map(formElement=>\r\n         (    <Input \r\n             key={formElement.id}\r\n             elementType={formElement.config.elementType}\r\n             elementConfig={formElement.config.elementConfig}\r\n             value={formElement.config.value} \r\n             invalid={!formElement.config.valid}\r\n             shouldValidate={formElement.config.validation}\r\n             touched={formElement.config.touched}\r\n             changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\r\n         )\r\n         );\r\n\r\n         if(this.props.loading){\r\n             form=<Spinner/>;\r\n         }\r\n\r\n         let errorMessge=null;\r\n\r\n         if(this.props.error){\r\n             errorMessge=(\r\n                 <p>{this.props.error.message}</p>\r\n             );\r\n         }\r\n         let authRedirect=null;\r\n         if(this.props.isAuthenticated){\r\n            authRedirect=<Redirect to={this.props.authRedirectPath}/>;\r\n         } \r\n        return (\r\n            <div className=\"Auth\">\r\n                {authRedirect}\r\n                {errorMessge}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                clicked={this.swithAuthModeHandler}\r\n                btnType=\"Danger\">Switch To {this.state.isSignup? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        loading: state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated:state.auth.token !==null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    };\r\n};\r\nconst mapDispatchToProps= dispatch =>{\r\n    return{\r\n        onAuth: (email,password, isSignup) => dispatch(actions.auth(email,password,isSignup)),\r\n        onSetAuthRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);\r\n"]},"metadata":{},"sourceType":"module"}