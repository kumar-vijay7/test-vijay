{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\ReactProjects\\\\myburger\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nvar ContactData = /*#__PURE__*/function (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: ''\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: ''\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: ''\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: ''\n        },\n        Email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: ''\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    _this.orderHandler = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price\n      };\n      axios.post('/orders.json', order).then(function (response) {\n        _this.setState({\n          loading: false\n        });\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updateOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, formElementArray.map(function (formElement) {\n        return /*#__PURE__*/React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        clicked: this.orderHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, \"Order\"));\n\n      if (this.state.loading) {\n        form = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ContactData\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 14\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 18\n        }\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nexport default ContactData;","map":{"version":3,"sources":["E:/ReactProjects/myburger/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","street","zipCode","country","Email","deliveryMethod","options","displayValue","loading","orderHandler","e","preventDefault","setState","order","ingredients","props","price","post","then","response","history","push","catch","error","inputChangedHandler","event","inputIdentifier","updateOrderForm","updatedFormElement","updatedOrderForm","target","formElementArray","key","id","config","form","map","formElement"],"mappings":";;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;;IACOC,W;;;;;;;;;;;;;;;UACFC,K,GAAM;AACHC,MAAAA,SAAS,EAAC;AACFC,QAAAA,IAAI,EAAC;AACDC,UAAAA,WAAW,EAAC,OADX;AAEDC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFb;AAMDC,UAAAA,KAAK,EAAC;AANL,SADH;AASFC,QAAAA,MAAM,EAAC;AACHL,UAAAA,WAAW,EAAC,OADT;AAEHC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFX;AAMHC,UAAAA,KAAK,EAAC;AANH,SATL;AAiBFE,QAAAA,OAAO,EAAC;AACJN,UAAAA,WAAW,EAAC,OADR;AAEJC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFV;AAMJC,UAAAA,KAAK,EAAC;AANF,SAjBN;AAyBFG,QAAAA,OAAO,EAAC;AACJP,UAAAA,WAAW,EAAC,OADR;AAEJC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFV;AAMJC,UAAAA,KAAK,EAAC;AANF,SAzBN;AAiCFI,QAAAA,KAAK,EAAC;AACFR,UAAAA,WAAW,EAAC,OADV;AAEFC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,OADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFZ;AAMFC,UAAAA,KAAK,EAAC;AANJ,SAjCJ;AAyCFK,QAAAA,cAAc,EAAC;AACXT,UAAAA,WAAW,EAAC,QADD;AAEXC,UAAAA,aAAa,EAAC;AACVS,YAAAA,OAAO,EAAC,CACJ;AAACN,cAAAA,KAAK,EAAC,SAAP;AAAkBO,cAAAA,YAAY,EAAC;AAA/B,aADI,EAEJ;AAACP,cAAAA,KAAK,EAAC,UAAP;AAAmBO,cAAAA,YAAY,EAAC;AAAhC,aAFI;AADE,WAFH;AAQXP,UAAAA,KAAK,EAAC;AARK;AAzCb,OADP;AAsDFQ,MAAAA,OAAO,EAAC;AAtDN,K;;UAyDNC,Y,GAAa,UAACC,CAAD,EAAK;AACfA,MAAAA,CAAC,CAACC,cAAF;;AACI,YAAKC,QAAL,CAAc;AAACJ,QAAAA,OAAO,EAAC;AAAT,OAAd;;AACJ,UAAMK,KAAK,GAAC;AACRC,QAAAA,WAAW,EAAC,MAAKC,KAAL,CAAWD,WADf;AAERE,QAAAA,KAAK,EAAC,MAAKD,KAAL,CAAWC;AAFT,OAAZ;AAKH3B,MAAAA,KAAK,CAAC4B,IAAN,CAAW,cAAX,EAA0BJ,KAA1B,EACKK,IADL,CACU,UAAAC,QAAQ,EAAE;AACZ,cAAKP,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAC;AAAT,SAAd;;AACA,cAAKO,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,OAJL,EAKKC,KALL,CAKW,UAAAC,KAAK,EAAE;AACX,cAAKX,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAC;AAAT,SAAd;AACF,OAPL;AASC,K;;UACDgB,mB,GAAoB,UAACC,KAAD,EAAOC,eAAP,EAAyB;AACzC,UAAMC,eAAe,qBACd,MAAKlC,KAAL,CAAWC,SADG,CAArB;;AAGA,UAAMkC,kBAAkB,qBACjBC,gBAAgB,CAACH,eAAD,CADC,CAAxB;;AAGGE,MAAAA,kBAAkB,CAAC5B,KAAnB,GAAyByB,KAAK,CAACK,MAAN,CAAa9B,KAAtC;AACA4B,MAAAA,kBAAkB,CAACF,eAAD,CAAlB,GAAoCE,kBAApC;;AACA,YAAKhB,QAAL,CAAc;AACVlB,QAAAA,SAAS,EAACmC;AADA,OAAd;AAGN,K;;;;;;;6BACO;AAAA;;AAEJ,UAAME,gBAAgB,GAAC,EAAvB;;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAKvC,KAAL,CAAWC,SAA3B,EAAqC;AAClCqC,QAAAA,gBAAgB,CAACV,IAAjB,CAAsB;AAClBY,UAAAA,EAAE,EAACD,GADe;AAElBE,UAAAA,MAAM,EAAC,KAAKzC,KAAL,CAAWC,SAAX,CAAqBsC,GAArB;AAFW,SAAtB;AAIF;;AACD,UAAIG,IAAI,gBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCJ,gBAAgB,CAACK,GAAjB,CAAqB,UAAAC,WAAW;AAAA,4BAC7B,oBAAC,KAAD;AACC,UAAA,GAAG,EAAEA,WAAW,CAACJ,EADlB;AAEC,UAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBtC,WAFjC;AAGC,UAAA,aAAa,EAAEyC,WAAW,CAACH,MAAZ,CAAmBrC,aAHnC;AAIC,UAAA,KAAK,EAAEwC,WAAW,CAACH,MAAZ,CAAmBlC,KAJ3B;AAKC,UAAA,OAAO,EAAE,iBAACyB,KAAD;AAAA,mBAAS,MAAI,CAACD,mBAAL,CAAyBC,KAAzB,EAA+BY,WAAW,CAACJ,EAA3C,CAAT;AAAA,WALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD6B;AAAA,OAAhC,CADD,eASA,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,OAAO,EAAE,KAAKxB,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATA,CADH;;AAaA,UAAG,KAAKhB,KAAL,CAAWe,OAAd,EAAsB;AAClB2B,QAAAA,IAAI,gBAAC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAL;AACH;;AACD,0BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,EAEQA,IAFR,CADJ;AAMH;;;;EAxHqBhD,S;;AA4H3B,eAAeK,WAAf","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\n class ContactData extends Component {\r\n     state={\r\n        orderForm:{\r\n                name:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Your name'\r\n                    },\r\n                    value:''\r\n                },\r\n                street:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Street'\r\n                    },\r\n                    value:''\r\n                },\r\n                zipCode:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'ZIP Code'\r\n                    },\r\n                    value:''\r\n                },\r\n                country:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Country'\r\n                    },\r\n                    value:''\r\n                },\r\n                Email:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder: 'Your E-Mail'\r\n                    },\r\n                    value:''\r\n                },\r\n                deliveryMethod:{\r\n                    elementType:'select',\r\n                    elementConfig:{\r\n                        options:[\r\n                            {value:'fastest', displayValue:'Fastest'},\r\n                            {value:'cheapest', displayValue:'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value:''\r\n                }\r\n\r\n        },\r\n         loading:false\r\n     }\r\n\r\n     orderHandler=(e)=>{\r\n        e.preventDefault(); \r\n            this.setState({loading:true});\r\n        const order={\r\n            ingredients:this.props.ingredients,\r\n            price:this.props.price, \r\n           \r\n        }\r\n     axios.post('/orders.json',order)\r\n         .then(response=>{\r\n             this.setState({loading:false});\r\n             this.props.history.push('/');\r\n         })\r\n         .catch(error=>{\r\n            this.setState({loading:false});\r\n         });  \r\n\r\n     }\r\n     inputChangedHandler=(event,inputIdentifier)=>{\r\n         const updateOrderForm={\r\n             ...this.state.orderForm\r\n         }\r\n         const updatedFormElement={\r\n             ...updatedOrderForm[inputIdentifier]\r\n            };\r\n            updatedFormElement.value=event.target.value;\r\n            updatedFormElement[inputIdentifier]=updatedFormElement;\r\n            this.setState({\r\n                orderForm:updatedOrderForm\r\n            })\r\n     }\r\n     render(){\r\n\r\n         const formElementArray=[];\r\n         for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n         }\r\n         let form=(\r\n            <form>\r\n            {formElementArray.map(formElement=>(\r\n                <Input\r\n                 key={formElement.id}\r\n                 elementType={formElement.config.elementType}\r\n                 elementConfig={formElement.config.elementConfig}\r\n                 value={formElement.config.value} \r\n                 changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\r\n            ))}\r\n            <Button btnType=\"Success\" clicked={this.orderHandler}>Order</Button>\r\n        </form>\r\n         );\r\n         if(this.state.loading){\r\n             form=<Spinner/>\r\n         }\r\n         return(\r\n             <div className=\"ContactData\">\r\n                 <h4>Enter your Contact Data</h4>\r\n                    {form}\r\n             </div>\r\n         );\r\n     }\r\n   \r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}