{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\ReactProjects\\\\myburger\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/WithErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../Shared/utility';\n\nvar contactData = function contactData(props) {\n  var _useState = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    Email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Your E-Mail'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }]\n      },\n      value: 'fastest',\n      validation: {},\n      valid: true\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderForm = _useState2[0],\n      setOrderForm = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formIsValid = _useState4[0],\n      setFormIsValid = _useState4[1];\n\n  var orderHandler = function orderHandler(e) {\n    e.preventDefault(); //  this.setState({loading:true});\n\n    var formData = {};\n\n    for (var formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    var order = {\n      ingredients: props.ings,\n      price: props.price,\n      orderData: formData,\n      userId: props.userId\n    };\n\n    _this.props.onOrderBurger(order, props.token);\n  };\n\n  var inputChangedHandler = function inputChangedHandler(event, inputIdentifier) {\n    var updatedFormElement = updateObject(orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\n      touched: true\n    });\n    var updatedOrderForm = updateObject(orderForm, _defineProperty({}, inputIdentifier, updatedFormElement));\n    var formIsValid = true;\n\n    for (var _inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n    }\n\n    setOrderForm(updatedOrderForm);\n    setOrderForm(formIsValid);\n  };\n\n  var formElementArray = [];\n\n  for (var key in orderForm) {\n    formElementArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  var form = /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: orderHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, formElementArray.map(function (formElement) {\n    return /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: function changed(event) {\n        return inputChangedHandler(event, formElement.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !formIsValid,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Order\"));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 19\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ContactData\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 18\n    }\n  }, \"Enter your Contact Data\"), form);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData, token) {\n      return dispatch(actions.purchaseBurger(orderData, token));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(contactData, axios));","map":{"version":3,"sources":["E:/ReactProjects/myburger/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","useState","connect","Button","axios","Spinner","Input","withErrorHandler","actions","updateObject","checkValidity","contactData","props","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","Email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","orderHandler","e","preventDefault","formData","formElementIdentifier","order","ingredients","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","event","inputIdentifier","updatedFormElement","target","updatedOrderForm","formElementArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","state","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/WithErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject,checkValidity } from '../../../Shared/utility';\r\n\r\n const contactData = props =>{\r\n    const [orderForm,setOrderForm] =  useState({\r\n                name:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Your name'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                street:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Street'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                zipCode:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'ZIP Code'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        minLength:5,\r\n                        maxLength:5\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                country:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Country'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                Email:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder: 'Your E-Mail'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                deliveryMethod:{\r\n                    elementType:'select',\r\n                    elementConfig:{\r\n                        options:[\r\n                            {value:'fastest', displayValue:'Fastest'},\r\n                            {value:'cheapest', displayValue:'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value:'fastest',\r\n                    validation:{},\r\n                    valid:true\r\n                }\r\n\r\n        })\r\n        const [formIsValid,setFormIsValid] = useState(false);\r\n\r\n   const orderHandler=(e)=>{\r\n        e.preventDefault(); \r\n          //  this.setState({loading:true});\r\n        const formData={};\r\n        for(let formElementIdentifier in orderForm){\r\n            formData[formElementIdentifier]=orderForm[formElementIdentifier].value;\r\n        }\r\n        const order={\r\n            ingredients:props.ings     ,\r\n            price:props.price, \r\n            orderData:formData,\r\n            userId: props.userId\r\n           \r\n        }\r\n        this.props.onOrderBurger(order,props.token );\r\n\r\n     }\r\n\r\n     \r\n   const inputChangedHandler=(event,inputIdentifier)=>{\r\n\r\n         const updatedFormElement= updateObject(orderForm[inputIdentifier],{\r\n            value:event.target.value,\r\n            valid:checkValidity(event.target.value,orderForm[inputIdentifier].validation),\r\n            touched:true\r\n         });\r\n\r\n         const updatedOrderForm=updateObject(orderForm,{\r\n            [inputIdentifier]: updatedFormElement\r\n         });\r\n            \r\n            let formIsValid = true;\r\n            for( let inputIdentifier in updatedOrderForm ){\r\n                formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n            }\r\n            setOrderForm(updatedOrderForm);\r\n            setOrderForm(formIsValid);\r\n         }\r\n         const formElementArray=[];\r\n         for (let key in orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:orderForm[key]\r\n            });\r\n         }\r\n         let form=(\r\n            <form onSubmit={orderHandler}>\r\n            {formElementArray.map(formElement=>(\r\n                <Input\r\n                 key={formElement.id}\r\n                 elementType={formElement.config.elementType}\r\n                 elementConfig={formElement.config.elementConfig}\r\n                 value={formElement.config.value} \r\n                 invalid={!formElement.config.valid}\r\n                 shouldValidate={formElement.config.validation}\r\n                 touched={formElement.config.touched}\r\n                 changed={(event)=>inputChangedHandler(event,formElement.id)}/>\r\n            ))}\r\n            <Button btnType=\"Success\" disabled={!formIsValid}>Order</Button>\r\n        </form>\r\n         );\r\n         if(props.loading){\r\n             form=<Spinner/>\r\n         }\r\n         return(\r\n             <div className=\"ContactData\">\r\n                 <h4>Enter your Contact Data</h4>\r\n                    {form}\r\n             </div>\r\n         );\r\n     }\r\n   \r\n\r\n\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        ings:state.burgerBuilder.ingredients,\r\n        price:state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n    return{\r\n        onOrderBurger: (orderData,token)=> dispatch(actions.purchaseBurger(orderData,token)) \r\n    };\r\n   \r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(contactData,axios));"]},"metadata":{},"sourceType":"module"}