{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\ReactProjects\\\\myburger\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nvar ContactData = /*#__PURE__*/function (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        Email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    _this.orderHandler = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(function (response) {\n        _this.setState({\n          loading: false\n        });\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = false;\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }, formElementArray.map(function (formElement) {\n        return /*#__PURE__*/React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, \"Order\"));\n\n      if (this.state.loading) {\n        form = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ContactData\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 14\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 18\n        }\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nexport default ContactData;","map":{"version":3,"sources":["E:/ReactProjects/myburger/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","street","zipCode","minLength","maxLength","country","Email","deliveryMethod","options","displayValue","loading","orderHandler","e","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","formElementArray","key","id","config","form","map","formElement"],"mappings":";;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;;IACOC,W;;;;;;;;;;;;;;;UACFC,K,GAAM;AACHC,MAAAA,SAAS,EAAC;AACFC,QAAAA,IAAI,EAAC;AACDC,UAAAA,WAAW,EAAC,OADX;AAEDC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFb;AAMDC,UAAAA,KAAK,EAAC,EANL;AAODC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WAPV;AAUDC,UAAAA,KAAK,EAAC;AAVL,SADH;AAaFC,QAAAA,MAAM,EAAC;AACHR,UAAAA,WAAW,EAAC,OADT;AAEHC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFX;AAMHC,UAAAA,KAAK,EAAC,EANH;AAOHC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WAPR;AAUHC,UAAAA,KAAK,EAAC;AAVH,SAbL;AAyBFE,QAAAA,OAAO,EAAC;AACJT,UAAAA,WAAW,EAAC,OADR;AAEJC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFV;AAMJC,UAAAA,KAAK,EAAC,EANF;AAOJC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC,IADF;AAEPI,YAAAA,SAAS,EAAC,CAFH;AAGPC,YAAAA,SAAS,EAAC;AAHH,WAPP;AAYJJ,UAAAA,KAAK,EAAC;AAZF,SAzBN;AAuCFK,QAAAA,OAAO,EAAC;AACJZ,UAAAA,WAAW,EAAC,OADR;AAEJC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFV;AAMJC,UAAAA,KAAK,EAAC,EANF;AAOJC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WAPP;AAUJC,UAAAA,KAAK,EAAC;AAVF,SAvCN;AAmDFM,QAAAA,KAAK,EAAC;AACFb,UAAAA,WAAW,EAAC,OADV;AAEFC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,OADK;AAEVC,YAAAA,WAAW,EAAE;AAFH,WAFZ;AAMFC,UAAAA,KAAK,EAAC,EANJ;AAOFC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WAPT;AAUFC,UAAAA,KAAK,EAAC;AAVJ,SAnDJ;AA+DFO,QAAAA,cAAc,EAAC;AACXd,UAAAA,WAAW,EAAC,QADD;AAEXC,UAAAA,aAAa,EAAC;AACVc,YAAAA,OAAO,EAAC,CACJ;AAACX,cAAAA,KAAK,EAAC,SAAP;AAAkBY,cAAAA,YAAY,EAAC;AAA/B,aADI,EAEJ;AAACZ,cAAAA,KAAK,EAAC,UAAP;AAAmBY,cAAAA,YAAY,EAAC;AAAhC,aAFI;AADE,WAFH;AAQXZ,UAAAA,KAAK,EAAC;AARK;AA/Db,OADP;AA4EFa,MAAAA,OAAO,EAAC;AA5EN,K;;UA+ENC,Y,GAAa,UAACC,CAAD,EAAK;AACfA,MAAAA,CAAC,CAACC,cAAF;;AACI,YAAKC,QAAL,CAAc;AAACJ,QAAAA,OAAO,EAAC;AAAT,OAAd;;AACJ,UAAMK,QAAQ,GAAC,EAAf;;AACA,WAAI,IAAIC,qBAAR,IAAiC,MAAK1B,KAAL,CAAWC,SAA5C,EAAsD;AAClDwB,QAAAA,QAAQ,CAACC,qBAAD,CAAR,GAAgC,MAAK1B,KAAL,CAAWC,SAAX,CAAqByB,qBAArB,EAA4CnB,KAA5E;AACH;;AACD,UAAMoB,KAAK,GAAC;AACRC,QAAAA,WAAW,EAAC,MAAKC,KAAL,CAAWD,WADf;AAERE,QAAAA,KAAK,EAAC,MAAKD,KAAL,CAAWC,KAFT;AAGRC,QAAAA,SAAS,EAACN;AAHF,OAAZ;AAMH7B,MAAAA,KAAK,CAACoC,IAAN,CAAW,cAAX,EAA0BL,KAA1B,EACKM,IADL,CACU,UAAAC,QAAQ,EAAE;AACZ,cAAKV,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAC;AAAT,SAAd;;AACA,cAAKS,KAAL,CAAWM,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,OAJL,EAKKC,KALL,CAKW,UAAAC,KAAK,EAAE;AACX,cAAKd,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAC;AAAT,SAAd;AACF,OAPL;AASC,K;;UAeDmB,mB,GAAoB,UAACC,KAAD,EAAOC,eAAP,EAAyB;AAEzC,UAAMC,gBAAgB,qBACf,MAAK1C,KAAL,CAAWC,SADI,CAAtB;;AAGA,UAAM0C,kBAAkB,qBACjBD,gBAAgB,CAACD,eAAD,CADC,CAAxB;;AAGGE,MAAAA,kBAAkB,CAACpC,KAAnB,GAAyBiC,KAAK,CAACI,MAAN,CAAarC,KAAtC;AACAoC,MAAAA,kBAAkB,CAACjC,KAAnB,GAAyB,MAAKmC,aAAL,CAAmBF,kBAAkB,CAACpC,KAAtC,EAA4CoC,kBAAkB,CAACnC,UAA/D,CAAzB;AACAkC,MAAAA,gBAAgB,CAACD,eAAD,CAAhB,GAAkCE,kBAAlC;;AACA,YAAKnB,QAAL,CAAc;AAACvB,QAAAA,SAAS,EAACyC;AAAX,OAAd;AACN,K;;;;;;;kCAzBanC,K,EAAMuC,K,EAAM;AACvB,UAAIC,OAAO,GAAC,KAAZ;;AACA,UAAGD,KAAK,CAACrC,QAAT,EAAkB;AACdsC,QAAAA,OAAO,GAACxC,KAAK,CAACyC,IAAN,OAAe,EAAf,IAAqBD,OAA7B;AACH;;AACD,UAAGD,KAAK,CAACjC,SAAT,EAAmB;AACfkC,QAAAA,OAAO,GAACxC,KAAK,CAAC0C,MAAN,IAAcH,KAAK,CAACjC,SAApB,IAAiCkC,OAAzC;AACH;;AACD,UAAGD,KAAK,CAAChC,SAAT,EAAmB;AACfiC,QAAAA,OAAO,GAACxC,KAAK,CAAC0C,MAAN,IAAcH,KAAK,CAAChC,SAApB,IAAiCiC,OAAzC;AACH;;AACD,aAAOA,OAAP;AACF;;;6BAcO;AAAA;;AAEJ,UAAMG,gBAAgB,GAAC,EAAvB;;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAKnD,KAAL,CAAWC,SAA3B,EAAqC;AAClCiD,QAAAA,gBAAgB,CAACd,IAAjB,CAAsB;AAClBgB,UAAAA,EAAE,EAACD,GADe;AAElBE,UAAAA,MAAM,EAAC,KAAKrD,KAAL,CAAWC,SAAX,CAAqBkD,GAArB;AAFW,SAAtB;AAIF;;AACD,UAAIG,IAAI,gBACL;AAAM,QAAA,QAAQ,EAAE,KAAKjC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC6B,gBAAgB,CAACK,GAAjB,CAAqB,UAAAC,WAAW;AAAA,4BAC7B,oBAAC,KAAD;AACC,UAAA,GAAG,EAAEA,WAAW,CAACJ,EADlB;AAEC,UAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBlD,WAFjC;AAGC,UAAA,aAAa,EAAEqD,WAAW,CAACH,MAAZ,CAAmBjD,aAHnC;AAIC,UAAA,KAAK,EAAEoD,WAAW,CAACH,MAAZ,CAAmB9C,KAJ3B;AAKC,UAAA,OAAO,EAAE,iBAACiC,KAAD;AAAA,mBAAS,MAAI,CAACD,mBAAL,CAAyBC,KAAzB,EAA+BgB,WAAW,CAACJ,EAA3C,CAAT;AAAA,WALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD6B;AAAA,OAAhC,CADD,eASA,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATA,CADH;;AAaA,UAAG,KAAKpD,KAAL,CAAWoB,OAAd,EAAsB;AAClBkC,QAAAA,IAAI,gBAAC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAL;AACH;;AACD,0BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,EAEQA,IAFR,CADJ;AAMH;;;;EAjKqB5D,S;;AAqK3B,eAAeK,WAAf","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\n class ContactData extends Component {\r\n     state={\r\n        orderForm:{\r\n                name:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Your name'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false\r\n                },\r\n                street:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Street'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false\r\n                },\r\n                zipCode:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'ZIP Code'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        minLength:5,\r\n                        maxLength:5\r\n                    },\r\n                    valid:false\r\n                },\r\n                country:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder: 'Country'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false\r\n                },\r\n                Email:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder: 'Your E-Mail'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false\r\n                },\r\n                deliveryMethod:{\r\n                    elementType:'select',\r\n                    elementConfig:{\r\n                        options:[\r\n                            {value:'fastest', displayValue:'Fastest'},\r\n                            {value:'cheapest', displayValue:'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value:''\r\n                }\r\n\r\n        },\r\n         loading:false\r\n     }\r\n\r\n     orderHandler=(e)=>{\r\n        e.preventDefault(); \r\n            this.setState({loading:true});\r\n        const formData={};\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order={\r\n            ingredients:this.props.ingredients,\r\n            price:this.props.price, \r\n            orderData:formData\r\n           \r\n        }\r\n     axios.post('/orders.json',order)\r\n         .then(response=>{\r\n             this.setState({loading:false});\r\n             this.props.history.push('/');\r\n         })\r\n         .catch(error=>{\r\n            this.setState({loading:false});\r\n         });  \r\n\r\n     }\r\n\r\n     checkValidity(value,rules){\r\n        let isValid=false;\r\n        if(rules.required){\r\n            isValid=value.trim()!=='' && isValid;\r\n        }\r\n        if(rules.minLength){\r\n            isValid=value.length>=rules.minLength && isValid\r\n        }\r\n        if(rules.maxLength){\r\n            isValid=value.length<=rules.maxLength && isValid\r\n        }\r\n        return isValid;\r\n     }\r\n     inputChangedHandler=(event,inputIdentifier)=>{\r\n\r\n         const updatedOrderForm={\r\n             ...this.state.orderForm\r\n         };\r\n         const updatedFormElement={\r\n             ...updatedOrderForm[inputIdentifier]\r\n            };\r\n            updatedFormElement.value=event.target.value;\r\n            updatedFormElement.valid=this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n            updatedOrderForm[inputIdentifier]=updatedFormElement;\r\n            this.setState({orderForm:updatedOrderForm });\r\n     }\r\n     render(){\r\n\r\n         const formElementArray=[];\r\n         for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n         }\r\n         let form=(\r\n            <form onSubmit={this.orderHandler}>\r\n            {formElementArray.map(formElement=>(\r\n                <Input\r\n                 key={formElement.id}\r\n                 elementType={formElement.config.elementType}\r\n                 elementConfig={formElement.config.elementConfig}\r\n                 value={formElement.config.value} \r\n                 changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\r\n            ))}\r\n            <Button btnType=\"Success\">Order</Button>\r\n        </form>\r\n         );\r\n         if(this.state.loading){\r\n             form=<Spinner/>\r\n         }\r\n         return(\r\n             <div className=\"ContactData\">\r\n                 <h4>Enter your Contact Data</h4>\r\n                    {form}\r\n             </div>\r\n         );\r\n     }\r\n   \r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}